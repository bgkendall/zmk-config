/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>


/* Layers */
#define CMAK 0
#define QWER 1
#define FEAX 2
#define FUNC 3
#define NAVI 4
#define NUMB 5
#define NUML 6
#define NUMX 7
#define MET  8

/* Option Symbols */
#define LDQUO   RA(LBKT)
#define RDQUO   RA(LBRC)
#define LSQUO   RA(RBKT)
#define RSQUO   RA(RBRC)
#define NDASH   RA(MINUS)
#define MDASH   RA(UNDER)
#define ELLIP   RA(SEMI)

/* Shortcuts */
#define SCRSHT  RG(RS(N4))
#define TIMESHT RG(RA(RC(F10)))

/* Shorter Number Pad Codes */
#define P1      KP_NUMBER_1
#define P2      KP_NUMBER_2
#define P3      KP_NUMBER_3
#define P4      KP_NUMBER_4
#define P5      KP_NUMBER_5
#define P6      KP_NUMBER_6
#define P7      KP_NUMBER_7
#define P8      KP_NUMBER_8
#define P9      KP_NUMBER_9
#define P0      KP_NUMBER_0
#define PPLUS   KP_PLUS
#define PMIN    KP_MINUS
#define PMULT   KP_MULTIPLY
#define PDIV    KP_DIVIDE
#define PEQL    KP_EQUAL
#define PDOT    KP_DOT


&mt {
    tapping-term-ms = <175>;
    flavor = "balanced";
};

/ {
    behaviors {

        bsdel: backsp_del {
            compatible = "zmk,behavior-mod-morph";
            label = "BACKSP_DEL";
            #binding-cells = <0>;
            bindings = <&kp BSPC>, <&kp DEL>;
            mods = <MOD_LSFT>;
        };
        comlp: comma_paren {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_PAREN";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp LPAR>;
            mods = <MOD_LSFT>;
        };
        dotrp: dot_paren {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_PAREN";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp RPAR>;
            mods = <MOD_LSFT>;
        };

        td_q: tap_dance_q {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_Q";
            #binding-cells = <0>;
            tapping-term-ms = <175>;
            bindings = <&kp Q>, <&kp SQT>;
        };
        td_w: tap_dance_w {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_W";
            #binding-cells = <0>;
            tapping-term-ms = <175>;
            bindings = <&kp W>, <&kp DQT>;
        };
        td_comma: tap_dance_comma {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_COMMA";
            #binding-cells = <0>;
            tapping-term-ms = <175>;
            bindings = <&kp COMMA>, <&kp SEMI>;
        };
        td_dot: tap_dance_dot {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_DOT";
            #binding-cells = <0>;
            tapping-term-ms = <175>;
            bindings = <&kp DOT>, <&kp COLON>;
        };

/*
        grava: grave_a {
            compatible = "zmk,behavior-mod-morph";
            label = "GRAVE_A";
            #binding-cells = <0>;
            bindings = <&kp A>, <&kp GRAVE>;
            mods = <MOD_LGUI>;
        };
        taba: tab_a {
            compatible = "zmk,behavior-mod-morph";
            label = "TAB_A";
            #binding-cells = <0>;
            bindings = <&kp A>, <&kp TAB>;
            mods = <(MOD_LGUI|MOD_LALT|MOD_LCTL)>;
        };
        gravq: grave_q {
            compatible = "zmk,behavior-mod-morph";
            label = "GRAVE_Q";
            #binding-cells = <0>;
            bindings = <&kp Q>, <&kp GRAVE>;
            mods = <MOD_LGUI>;
        };
        tabq: tab_q {
            compatible = "zmk,behavior-mod-morph";
            label = "TAB_Q";
            #binding-cells = <0>;
            bindings = <&kp Q>, <&kp TAB>;
            mods = <(MOD_LGUI|MOD_LALT|MOD_LCTL)>;
        };
        stabr: shift_tab_r {
            compatible = "zmk,behavior-mod-morph";
            label = "SHIFT_TAB_R";
            #binding-cells = <0>;
            bindings = <&kp R>, <&kp BTAB>;
            mods = <(MOD_LALT|MOD_LCTL)>;
        };
        gravw: grave_w {
            compatible = "zmk,behavior-mod-morph";
            label = "GRAVE_W";
            #binding-cells = <0>;
            bindings = <&kp W>, <&kp GRAVE>;
            mods = <MOD_LGUI>;
        };
        tabw: tab_w {
            compatible = "zmk,behavior-mod-morph";
            label = "TAB_W";
            #binding-cells = <0>;
            bindings = <&kp W>, <&kp TAB>;
            mods = <(MOD_LGUI|MOD_LALT|MOD_LCTL)>;
        };
        comsc: comma_semi {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_SEMI";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp SEMI>;
            mods = <MOD_LSFT>;
        };
        dotco: dot_colon {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_COLON";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp COLON>;
            mods = <MOD_LSFT>;
        };
        comex: comma_excl {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_EXCL";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp EXCL>;
            mods = <MOD_LSFT>;
        };
        comqm: comma_qmark {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_QMARK";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp QMARK>;
            mods = <MOD_LSFT>;
        };
        dotex: dot_excl {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_EXCL";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp EXCL>;
            mods = <MOD_LSFT>;
        };
        dotqm: dot_qmark {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_QMARK";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp QMARK>;
            mods = <MOD_LSFT>;
        };
        minpl: minus_plus {
            compatible = "zmk,behavior-mod-morph";
            label = "MINUS_PLUS";
            #binding-cells = <0>;
            bindings = <&kp MINUS>, <&kp PLUS>;
            mods = <MOD_LSFT>;
        };
        slast: slash_astrk {
            compatible = "zmk,behavior-mod-morph";
            label = "SLASH_ASTRK";
            #binding-cells = <0>;
            bindings = <&kp SLASH>, <&kp ASTERISK>;
            mods = <MOD_LSFT>;
        };
*/
    };

    combos {
        compatible = "zmk,combos";
        combo_esc {
            timeout-ms = <50>;
            key-positions = <0 1>;
            layers = <0>;
            bindings = <&kp ESC>;
        };
        combo_minus {
            timeout-ms = <50>;
            key-positions = <8 9>;
            layers = <0>;
            bindings = <&kp MINUS>;
        };
        combo_capsword {
            timeout-ms = <50>;
            key-positions = <20 21>;
            layers = <0>;
            bindings = <&caps_word>;
        };
        combo_equal {
            timeout-ms = <50>;
            key-positions = <28 29>;
            layers = <0>;
            bindings = <&kp EQUAL>;
        };
    };

    macros {
        m000: macro000 {
            label = "macro000";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&kp KP_N0 &kp KP_N0 &kp KP_N0>
                ;
        };
        m1: macro1 {
            label = "macro1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&kp M &kp 1>
                ;
        };
        m2: macro2 {
            label = "macro2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&kp M &kp 2>
                ;
        };
        bgk1: macro_bgk1 {
            label = "macro_bgk1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&kp LS(B) &kp A &kp R &kp N &kp A &kp B &kp Y>
                ;
        };
    };

    sensors {
        compatible = "zmk,keymap-sensors";
        sensors = <&encoder>;
    };


    keymap {
        compatible = "zmk,keymap";

        layer_ColeMAK {
            bindings = <
                &td_q       &td_w       &kp D       &kp P       &kp F       &kp J       &kp L       &kp O       &kp Y       &bsdel
                &mt LCTRL A &mt LALT R  &mt LGUI S  &mt LSHFT T &kp G       &kp M       &mt RSHFT N &mt RGUI E  &mt RALT I  &mt RCTRL U
                &mt LSHFT Z &kp X       &kp C       &kp V       &kp B       &kp K       &kp H       &comlp      &dotrp      &kp ESC
                                                    &lt FUNC TAB    &lt NAVI SPC        &lt NUMB RET
            >;
            sensor-bindings = <&inc_dec_kp LEFT RIGHT>;
        };

        layer_QWERty {
            bindings = <
                &kp Q       &kp W       &kp E       &kp R       &kp T       &kp Y       &kp U       &kp I       &kp O       &kp P
                &kp A       &kp S       &kp D       &kp F       &kp G       &kp H       &kp J       &kp K       &kp L       &bsdel
                &mt LSHFT Z &kp X       &kp C       &kp V       &kp B       &kp N       &kp M       &comlp      &dotrp      &kp ESC
                                                    &lt FUNC TAB    &lt NAVI SPC        &lt NUMB RET
            >;
            sensor-bindings = <&inc_dec_kp LEFT RIGHT>;
        };

        layer_Flip_Encoder_AXis {
            bindings = <
                &trans      &trans      &trans      &trans      &trans      &trans      &trans      &trans      &trans      &trans
                &trans      &trans      &trans      &trans      &trans      &trans      &trans      &trans      &trans      &trans
                &trans      &trans      &trans      &trans      &trans      &trans      &trans      &trans      &trans      &trans
                                                    &lt FUNC TAB    &lt NAVI SPC        &lt NUMB RET
            >;
            sensor-bindings = <&inc_dec_kp DOWN UP>;
        };

        layer_FUNCtion {
            bindings = <
                &kp K_WWW   &kp K_WWW   &kp F3      &kp LSQUO   &kp F5      &kp F6      &kp AMPS    &kp ASTRK &kp LG(LS(Y)) &kp F10
                &kp LDQUO   &kp RDQUO   &kp LG(S)   &kp RSQUO   &kp AT      &kp MDASH   &kp NDASH   &kp ELLIP   &kp PIPE    &kp CARET
                &kp LG(Z)   &kp LG(X)   &kp LG(C)   &kp LG(V)   &bgk1       &kp GRAVE   &kp HASH    &kp BSLH    &kp FSLH    &kp CAPS
                                                    &trans          &trans              &mo MET
            >;
            sensor-bindings = <&inc_dec_kp DOWN UP>;
        };

        layer_NAVIgation {
            bindings = <
                &kp TAB &kp LC(LS(TAB)) &kp UP      &kp LC(TAB) &kp HOME    &kp PG_UP   &kp TILDE   &kp N0      &m000       &kp EQUAL
                &kp GRAVE   &kp LEFT    &kp DOWN    &kp RIGHT   &kp END     &kp PG_DN   &kp RSHIFT  &kp RGUI    &kp RALT    &kp RCTRL
               &mt LSHFT N2 &kp N4 &kp LG(LA(LCTRL)) &kp INSERT &kp LBRC    &kp RBRC    &kp FSLH    &none       &none       &to FEAX
                                                    &kp LGUI        &trans              &kp RETURN
            >;
            sensor-bindings = <&inc_dec_kp PG_DN PG_UP>;
        };

        layer_NUMBer {
            bindings = <
                &kp DQT     &kp KP_N7   &kp KP_N8   &kp KP_N9  &kp KP_MINUS &kp PRCNT   &kp AMPS    &kp PMULT   &kp PDIV    &trans
                &kp SQT     &kp KP_N4   &kp KP_N5   &kp KP_N6   &kp KP_PLUS &kp LBKT    &kp TILDE   &kp DLLR    &kp PIPE    &tog NUML
          &lt NUMX KP_EQUAL &kp KP_N1   &kp KP_N2   &kp KP_N3   &kp KP_DOT  &kp LT      &kp HASH    &kp QMARK   &kp EXCL    &trans
                                                    &lt MET KP_N0   &kp KP_ENTER        &trans
            >;
            sensor-bindings = <&inc_dec_kp LEFT RIGHT>;
        };

        layer_NUMber_Lock {
            bindings = <
                &kp DQT     &kp KP_N7   &kp KP_N8   &kp KP_N9  &kp KP_MINUS &kp PRCNT   &kp AMPS    &kp PMULT   &kp PDIV    &trans
                &kp SQT     &kp KP_N4   &kp KP_N5   &kp KP_N6   &kp KP_PLUS &kp LBKT    &kp TILDE   &kp DLLR    &kp PIPE    &tog NUML
          &lt NUMX KP_EQUAL &kp KP_N1   &kp KP_N2   &kp KP_N3   &kp KP_DOT  &kp LT      &kp HASH    &kp QMARK   &kp EXCL    &trans
                                                    &lt MET KP_N0   &kp KP_ENTER        &trans
            >;
            sensor-bindings = <&inc_dec_kp LEFT RIGHT>;
        };

        layer_NUMber_eXtra {
            bindings = <
                &kp KP_NLCK &kp N7      &kp N8      &kp N9      &kp PDIV    &trans      &trans      &trans      &trans      &kp DELETE
                &kp LG(SQT) &kp N4      &kp N5      &kp N6      &kp PMULT   &kp RBKT    &trans      &trans      &trans      &trans
                &trans      &kp N1      &kp N2      &kp N3      &kp DOT     &kp GT      &trans      &kp LBRC    &kp RBRC    &trans
                                                    &lt MET N0      &trans              &trans
            >;
            sensor-bindings = <&inc_dec_kp LEFT RIGHT>;
        };

        layer_METa {
            bindings = <
                &kp F1      &kp F2      &kp F3      &kp F4      &kp F5      &kp F6      &kp F7      &kp F8      &kp F9      &bootloader
                &to CMAK    &to QWER    &kp C_SLEEP &kp C_BRI_UP &kp SCRSHT &kp K_MUTE &kp C_VOL_UP &kp F10     &kp F11     &kp F12
                &m1         &m2         &kp TIMESHT &kp C_BRI_DN &none      &kp CAPS   &kp C_VOL_DN &bt BT_SEL 0 &bt BT_SEL 1 &bl BL_TOG
                                                    &trans          &bl BL_TOG         &trans

            >;
            sensor-bindings = <&inc_dec_kp LEFT RIGHT>;
        };
    };
};
